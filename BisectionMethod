Option Explicit

Function Funcion(ByVal x As Double) As Double
    Funcion = (x ^ 3) + (4 * (x ^ 2)) - 10
End Function

Sub BisectionMethod()

Dim lowerLimit As Double
Dim upperLimit As Double
Dim continuityTest As Double
Dim precision As Double
Dim midpoint As Double
Dim iteration As Integer
Dim approximationError As Double
Dim startTime As Double
Dim endTime As Double
Dim totalTime As Double

' Create a new sheet for method data
Dim wsBS As Worksheet
Set wsBS = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
wsBS.Name = "Bisection_Method"

'Start the timer
startTime = Timer

10
'Ask user for iteration limits
lowerLimit = InputBox("Enter lower limit: ")
upperLimit = InputBox("Enter upper limit: ")

'Show provided limit values
wsBS.Cells(2, 2).Value = lowerLimit
wsBS.Cells(2, 3).Value = upperLimit

'Check continuity within proposed interval
continuityTest = Funcion(lowerLimit) * Funcion(upperLimit)
If continuityTest > 0 Then
    MsgBox ("The function is not continuous in the proposed interval, please provide another.")
    GoTo 10
End If

'Ask user for precision
precision = InputBox("Enter precision to achieve: ")
'Iteration start
iteration = 0

'Bisection Method start
While (upperLimit - lowerLimit) > precision
    'Increment iterations
    iteration = iteration + 1
    
    'Show iteration
    wsBS.Cells(1 + iteration, 1).Value = iteration

    'Calculate midpoint of proposed interval
    midpoint = (upperLimit + lowerLimit) / 2
    wsBS.Cells(1 + iteration, 4).Value = midpoint

     'Evaluating upper limit
        If Funcion(midpoint) > 0 Then
          upperLimit = midpoint
          wsBS.Cells(1 + iteration, 3).Value = midpoint
          wsBS.Cells(1 + iteration, 2).Value = lowerLimit
        Else
         lowerLimit = midpoint
         wsBS.Cells(1 + iteration, 2).Value = midpoint
         wsBS.Cells(1 + iteration, 3).Value = upperLimit
        End If
        
    'Evaluate function at the root
    wsBS.Cells(1 + iteration, 5).Value = Funcion(midpoint)
Wend

'Calculate error
approximationError = Abs(upperLimit - lowerLimit) / Abs(lowerLimit)

'End timer
endTime = Timer

'Show total time at the end of calculation
totalTime = endTime - startTime

'Method results headers
wsBS.Cells(1, 1).Value = "Iteration"
wsBS.Cells(1, 2).Value = "Lower Limit"
wsBS.Cells(1, 3).Value = "Upper Limit"
wsBS.Cells(1, 4).Value = "Midpoint"
wsBS.Cells(1, 5).Value = "Function Evaluated at Midpoint"
wsBS.Cells(1, 6).Value = "Total Time"
wsBS.Cells(2, 6).Value = Round(totalTime, 2) & " Seconds"
wsBS.Cells(4, 6).Value = "Approximate Root"
wsBS.Cells(5, 6).Value = midpoint
wsBS.Cells(7, 6).Value = "Error"
wsBS.Cells(8, 6).Value = approximationError

'Format headers
wsBS.Cells(1, 1).Font.Bold = True
wsBS.Cells(1, 2).Font.Bold = True
wsBS.Cells(1, 3).Font.Bold = True
wsBS.Cells(1, 4).Font.Bold = True
wsBS.Cells(1, 5).Font.Bold = True
wsBS.Cells(1, 6).Font.Bold = True
wsBS.Cells(2, 6).Font.Bold = True
wsBS.Cells(4, 6).Font.Bold = True
wsBS.Cells(5, 6).Font.Bold = True
wsBS.Cells(7, 6).Font.Bold = True
wsBS.Cells(8, 6).Font.Bold = True

'Auto-adjust column size
wsBS.Columns("A:G").AutoFit

End Sub

Sub VisualizeFunction()

    Dim startLimit As Double
    Dim endLimit As Double
    Dim stepValue As Double
    Dim valueY As Double
    Dim counter As Integer

    'Create a new sheet for data
    Dim wsData As Worksheet
    Set wsData = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
    wsData.Name = "Function"

    startLimit = InputBox("Provide initial value of the interval:")
    endLimit = InputBox("Provide the final value of the interval:")
    stepValue = InputBox("Provide the step value for the interval:")
    
    'Data headers in "Data" sheet
    wsData.Cells(1, 1).Value = "Consecutive"
    wsData.Cells(1, 2).Value = "x"
    wsData.Cells(1, 3).Value = "f(x)"
    
    'Format headers
    wsData.Cells(1, 1).Font.Bold = True
    wsData.Cells(1, 2).Font.Bold = True
    wsData.Cells(1, 3).Font.Bold = True

    'Start counter
    counter = 0

    While startLimit < endLimit
        counter = counter + 1
        startLimit = startLimit + stepValue
        valueY = Funcion(startLimit)
        wsData.Cells(1 + counter, 1).Value = counter
        wsData.Cells(1 + counter, 2).Value = startLimit
        wsData.Cells(1 + counter, 3).Value = valueY
    Wend

' Create a chart in the new sheet
    Dim chartObject As ChartObject
    Set chartObject = wsData.ChartObjects.Add(Left:=10, Width:=300, Top:=10, Height:=300)
    chartObject.Chart.ChartType = xlXYScatterSmoothNoMarkers

    ' Add data to the chart from the "Data" sheet
    Dim lastRow As Long
    lastRow = wsData.Cells(Rows.Count, 1).End(xlUp).Row

    chartObject.Chart.SetSourceData Source:=wsData.Range("Function!$B$2:$C$" & lastRow)

    ' Configure chart axes
    With chartObject.Chart
        ' Auto-adjust axes
        .Axes(xlCategory, xlPrimary).MinimumScaleIsAuto = True
        .Axes(xlCategory, xlPrimary).MaximumScaleIsAuto = True
        .Axes(xlValue, xlPrimary).MinimumScaleIsAuto = True
        .Axes(xlValue, xlPrimary).MaximumScaleIsAuto = True

        ' Assign name to data series
        .FullSeriesCollection(1).Name = "Function" ' Change "Series Name" to your desired name
    End With

    ' Assign axis names
    chartObject.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    chartObject.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = "x"

    chartObject.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    chartObject.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = "f(x)"
    
End Sub
